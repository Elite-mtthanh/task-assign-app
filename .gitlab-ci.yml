
stages:
  - preconfig
  - build
  - deploy

aws_configure:
  stage: preconfig
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  script:
    - echo "Setting up AWS CLI"
    - aws configure set region $AWS_DEFAULT_REGION
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws ecr get-login-password --region $ECR_IMAGE_REGION > docker_login_password.txt
  artifacts:
    paths:
    - docker_login_password.txt

build_image:
  stage: build
  image: docker:20.10-dind
  services:
  - "docker:dind"
  script:
    # Install app dependencies
    - cat docker_login_password.txt | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$ECR_IMAGE_REGION.amazonaws.com
    - docker build -f ./deploy-helper/nginx/Dockerfile.nginx -t built-nginx:latest .
    - docker build -f Dockerfile -t php-fpm:latest .
    - docker tag built-nginx:latest $AWS_ACCOUNT_ID.dkr.ecr.$ECR_IMAGE_REGION.amazonaws.com/gl/built-nginx:latest
    - docker tag php-fpm:latest $AWS_ACCOUNT_ID.dkr.ecr.$ECR_IMAGE_REGION.amazonaws.com/gl/php-fpm:latest
    - docker push $AWS_ACCOUNT_ID.dkr.ecr.$ECR_IMAGE_REGION.amazonaws.com/gl/built-nginx:latest
    - docker push $AWS_ACCOUNT_ID.dkr.ecr.$ECR_IMAGE_REGION.amazonaws.com/gl/php-fpm:latest

deploy_to_ecs:
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  stage: deploy
  script:
    # Deploy the latest image to ECS by updating the service
    - echo "Setting up AWS CLI"
    - aws configure set region $AWS_DEFAULT_REGION
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws ecs update-service --cluster $CI_AWS_ECS_CLUSTER --service $CI_AWS_ECS_SERVICE --force-new-deployment --region $AWS_DEFAULT_REGION
    - echo "ECS service update triggered successfully."